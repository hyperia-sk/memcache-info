#!/bin/bash

set -o errexit

white=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
normal=$(tput sgr0)
readonly format="%-18s %-10s %-30s\n"

function usage() 
{
    echo ""
    echo "${yellow}Command show statistics of Memcached${normal}"

    cat <<EOF

usage:
$(basename $0) [ -n | -p | -h | -r ]

-n <ip|hostname>
Name of the host or IP address (default: 127.0.0.1).

-p <port>
Port number (default: 11211).

-h
Prints this help.

-r
Disable interpret ANSI color and style sequences. (default: 1)

EOF
    exit $1
}

OPTERR=0
PORT="11211"
HOST_NAME="127.0.0.1"
COLOR=1
while getopts ":n:p:h:r" options
do
    case $options in
        n) 
            HOST_NAME=$OPTARG
            ;;
        p) 
            PORT=$OPTARG
            ;;
        r)
            COLOR=0
            ;;
        h|*) 
            usage 0
            ;;
    esac
done
shift $(($OPTIND - 1))


function _echo
{
    printf '%s\n' "$1" 
}

slabStats=$(mktemp)
_echo "stats slabs" | nc $HOST_NAME $PORT > $slabStats || (_echo "${red}Connect to $HOST_NAME:$PORT failed.${normal}" && exit 1)

stats=$(mktemp)
_echo "stats" | nc $HOST_NAME $PORT > $stats

function isInteger() 
{
    [[ ${1} == ?(-)+([0-9]) ]]
}

function _echoB
{
    _echo ""

    if [[ $COLOR == 1 ]]; then
        _echo "${white}$1${normal}"
    else 
        _echo "$1"
    fi

    _echo ""
}

scale=2
function _calc
{
    _echo "scale=$scale; $@" | bc -l | sed 's/^\./0./'
}

function _drawSparkLine
{
    chart="";
    scale=1
    percent=$(_calc "(($1/$2)*100)/5" );
    for i in `seq 0 $percent`
    do
        chart=$chart"â–ˆ"
    done

    _echo $chart
}

function getStatsInfo() 
{
    cat $stats | grep "STAT $1" | awk '{ print $3 }' | tr -d '\r'
}

function getLimitMaxBytes() 
{
    cat $stats | grep "STAT limit_maxbytes" | awk '{ print $3}' | tr -d '\r'
}

function getSlabInfo() 
{
    cat $slabStats | grep "STAT $1:$2" | awk '{ print $3}' | tr -d '\r'
}

function getTotalMemory() 
{
    cat $slabStats | grep "STAT total_malloced" | awk '{ print $3}' | tr -d '\r'
}

function getSlabMemoryUsed() 
{
    getSlabInfo $1 "mem_requested"
}

function getSlabMemoryWasted() 
{
    totalChunks=$( getSlabInfo $1 "total_chunks")
    usedChunks=$( getSlabInfo $1 "used_chunks")
    chunkSize=$( getSlabInfo $1 "chunk_size")
    memRequested=$( getSlabMemoryUsed $1 )

    if isInteger $memRequested; then
        totalChunksSize=$( _echo "$totalChunks * $chunkSize" | bc)
        if [ "$totalChunksSize" -lt "$memRequested" ]; then
            memoryWasted=$( _echo "($totalChunks - $usedChunks) * $chunkSize" | bc )
        else
            memoryWasted=$( _echo "$totalChunks * $chunkSize - $memRequested" | bc )
        fi
    fi

    _echo $memoryWasted
}

function getTotalMemoryUsed() 
{
    numberOfSlabs=$( cat $slabStats | grep "STAT active_slabs" | awk '{ print $3}' | tr -d '\r' )
    totalMemoryUsed=0

    for i in `seq 1 $numberOfSlabs`; 
    do
        memoryUsed=$( getSlabMemoryUsed $i )
        if isInteger $memoryUsed; then
            totalMemoryUsed=$( _echo "$totalMemoryUsed + $memoryUsed" | bc )	
        fi
    done

    _echo $totalMemoryUsed
}

function getTotalMemoryWasted()
{
    numberOfSlabs=$( cat $slabStats | grep "STAT active_slabs" | awk '{ print $3}' | tr -d '\r' )
    totalMemoryWasted=0

    for i in $(seq 1 $numberOfSlabs);
    do
        memoryWasted=$( getSlabMemoryWasted $i )
        if isInteger $memoryWasted; then
            totalMemoryWasted=$( _echo "$totalMemoryWasted + $memoryWasted" | bc )
        fi	
    done

    _echo $totalMemoryWasted
}

function main() 
{
    _echoB "Memcache Stats"
    printf "$format" "Version" "$(getStatsInfo "version")"
    printf "$format" "PID" $(getStatsInfo "pid")
    uptime=$(getStatsInfo "uptime")
    printf "$format" "Uptime" "~"$(_calc $uptime/86400)" days ($uptime sec.)"
    scale=0
    printf "$format" "Total items" $(getStatsInfo "curr_items")
    printf "$format" "Set requests" $(getStatsInfo "cmd_set")
    printf "$format" "Flush requests" $(getStatsInfo "cmd_flush")

    _echoB "Time info"
    printf "$format" "User time" "$(date)"
    printf "$format" "Memcache time" "$(date --date="@$(getStatsInfo "time ")")"

    _echoB "Connection info"
    printf "$format" "Current" $(getStatsInfo "curr_connections")
    printf "$format" "Total" $(getStatsInfo "total_connections")    

    _echoB "Get info"
    totalHits=$(getStatsInfo "get_hits")
    totalMisses=$(getStatsInfo "get_misses")
    totalRequests=$(_calc $totalHits+$totalMisses)
    scale=2
    printf "$format" "Requests" $totalRequests
    if (($totalRequests > 0)); then
        printf "$format" "Hits" "$totalHits" "$(_drawSparkLine $totalHits $totalRequests) ($(_calc 100*$totalHits/$totalRequests)%)"
        printf "$format" "Misses" "$totalMisses" "$(_drawSparkLine $totalMisses $totalRequests) ($(_calc 100*$totalMisses/$totalRequests)%)"
    fi
    
    _echoB "Delete info"
    totalHits=$(getStatsInfo "delete_hits")
    totalMisses=$(getStatsInfo "delete_misses")
    totalRequests=$(_calc $totalHits+$totalMisses)
    printf "$format" "Requests" $totalRequests
    if (($totalRequests > 0)); then
        printf "$format" "Hits" "$totalHits" "$(_drawSparkLine $totalHits $totalRequests) ($(_calc 100*$totalHits/$totalRequests)%)"
        printf "$format" "Misses" "$totalMisses" "$(_drawSparkLine $totalMisses $totalRequests) ($(_calc 100*$totalMisses/$totalRequests)%)"
    fi
    
    _echoB "Memory info"
    maxMemory=$( getLimitMaxBytes )
    totalMemory=$( getTotalMemory )
    totalMemoryPercent=$(_calc "($totalMemory / $maxMemory) * 100")
    totalMemoryUsed=$( getTotalMemoryUsed )
    totalMemoryWasted=$( getTotalMemoryWasted )
    freeMemory=$(_calc "$maxMemory - ($totalMemoryUsed + $totalMemoryWasted)" )
    freeMemoryPercent=$(_calc "($freeMemory / $maxMemory) * 100" )
    printf "$format" "Max memory" "$(_calc "($maxMemory)/1024/1024") MB"
    printf "$format" "Free" "$(_calc "($freeMemory)/1024/1024") MB" "$(_drawSparkLine $freeMemory $maxMemory) ($freeMemoryPercent%)"
    printf "$format" "Total allocated" "$(_calc "($totalMemory)/1024/1024") MB" "$(_drawSparkLine $totalMemory $maxMemory) ($totalMemoryPercent%)"
    printf "$format" "  - used" "$(_calc "($totalMemoryUsed)/1024/1024") MB"
    printf "$format" "  - wasted" "$(_calc "($totalMemoryWasted)/1024/1024") MB"

    _echo ""
}

main
exit
